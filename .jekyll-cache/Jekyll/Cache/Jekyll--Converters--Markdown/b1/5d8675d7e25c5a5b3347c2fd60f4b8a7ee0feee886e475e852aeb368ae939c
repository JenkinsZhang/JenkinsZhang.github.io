I"<blockquote>
  <p>This document is not completed and will be updated anytime.</p>
</blockquote>

<h2 id="前言">前言</h2>
<p>这是复习的第二篇，主要来讲讲SpringMVC的文件上传与下载，同步的代码可以点<a href="https://github.com/JenkinsZhang/springboot_springcloud_review">这里</a></p>

<p>前一篇:<a href="https://jenkinszhang.github.io/2019/12/28/hello-my-blog/">SpringMVC复习(一)</a></p>

<p>这里是<a href="https://jenkinszhang.github.io/archive/?tag=SpringMVC">合集</a></p>

<hr />
<h3 id="springmvc-复习二">SpringMVC 复习(二)</h3>
<blockquote>
  <h4 id="文件的下载">文件的下载</h4>
</blockquote>

<p>这个不需要前端代码，只需要后端写好，在浏览器打开相关链接就可以看到效果，代码如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>@GetMapping("/download")
    public String download(HttpServletRequest request, HttpServletResponse response) {
        try {
            // you should change this path when deploying on the server
            String filePath = "/Users/jenkinszhang/PROGRAMMING/Java/New_Backend_review/eureka-service/src/main/java/com/jenkins/eurekaservice/files/downloadFiles/";
            InputStream inputStream = new BufferedInputStream(new FileInputStream(filePath + "/timg.jpeg"));

            //if you want to download other files,please change this line of code
            String filename = "test.jpeg";


            byte[] body = new byte[inputStream.available()];
            inputStream.read(body);
            inputStream.close();
            ServletOutputStream outputStream = response.getOutputStream();
            response.setHeader("Content-Disposition", "attachment;filename=" + filename);
            outputStream.write(body);
            outputStream.flush();


        } catch (IOException e) {
            return "download failed";
        }
        return "success";
    }
</pre></td></tr></tbody></table></code></pre></div></div>

<p>接下来是解释:<br />
首先要获取到response，在方法中的参数写上<code class="highlighter-rouge">HttpServletResponse response</code>即可</p>

<p>然后规定你想要浏览器（客户端）获取的文件路径，在这里我写的是我自己项目存放文件的路径，如果到时候要部署到服务器上，这个路径可以根据个人需要进行更改，不过感觉这样蛮麻烦的</p>

<p>接着获取文件输入流，我这里使用了 <code class="highlighter-rouge">BufferdInputStream</code>，获取到文件的byte[]类型数组，都是些常规的IO操作</p>

<p>最后获取response的输出流，将文件写入到response中，注意response的响应头要进行设置，如:<br />
<code class="highlighter-rouge">response.setHeader("Content-Disposition", "attachment;filename=" + filename);</code></p>

<blockquote>
  <p>Content-Disposition属性有两种类型:<br />
    1.inline:将文件内容直接显示在页面<br />
    2.attachment:弹出对话框让用户下载<br />
filename:浏览器（客户端）下载的文件名</p>
</blockquote>

<p>在这里我用的是attachment,打开浏览器访问你的controller路径，就可以下载文件了</p>

<hr />
<blockquote>
  <h4 id="文件的上传">文件的上传</h4>
</blockquote>

<p>文件的上传总体来说还是挺方便的，与下载也是大同小异，只需要在方法中加上参数:<code class="highlighter-rouge">MultipartFile file</code>即可<br />
代码如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>       @PostMapping("/upload")
       public String upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
           // you should change this path when deploying on the server
           String filePath = "/Users/jenkinszhang/PROGRAMMING/Java/New_Backend_review/eureka-service/src/main/java/com/jenkins/eurekaservice/files/uploadFiles/";
           if (!file.isEmpty()) {
               try {
                   File dest = new File(filePath, file.getOriginalFilename());
                   if (!dest.exists()) {
                       dest.mkdirs();
                   }
                   file.transferTo(new File(filePath, file.getOriginalFilename()));
               } catch (IOException e) {
                   e.printStackTrace();
               }
           } else {
               return "failed";
           }
   
           return "success";
       }
</pre></td></tr></tbody></table></code></pre></div></div>
<p>filePath与下载差不多，是存放你上传的文件的文件夹路径，获取到了路径以后，使用<code class="highlighter-rouge">transferTo()</code>这个方法，将参数中的file文件上传到你指定的文件夹，后端的操作就完成了<br />
接下来上前端的示例代码，这里我用的是vue+bootstrap，直接把人家组件拉过来用了</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="rouge-code"><pre>&lt;template&gt;
	&lt;div&gt;
		&lt;!-- Styled --&gt;
		&lt;b-container&gt;
			&lt;b-row&gt;
				&lt;br&gt;&lt;br&gt;
			&lt;/b-row&gt;
			&lt;b-row align-v="center" align-h="center"&gt;
				&lt;b-col md="6"&gt;
					&lt;b-form-file
							v-model="file"
							:state="Boolean(file)"
							placeholder="Choose a file or drop it here..."
							drop-placeholder="Drop file here..."
					
					&gt;&lt;/b-form-file&gt;
				&lt;/b-col&gt;
			&lt;/b-row&gt;
			&lt;div class="mt-6"&gt;Selected file: &lt;/div&gt;
			&lt;b-button @click="upload_file" type="submit" variant="primary"&gt;summit&lt;/b-button&gt;
			&lt;!-- Plain mode --&gt;
			&lt;b-form-file v-model="file2" class="mt-3" plain&gt;&lt;/b-form-file&gt;
			&lt;div class="mt-3"&gt;Selected file: &lt;/div&gt;
		&lt;/b-container&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
    export default {
        name: "upload",
        data() {
            return {
                file: null,
                file2: null
            }
        },
        methods: {
            upload_file() {
                var form = new FormData()
                form.append("file", this.file)
                this.axios({
                    url: "http://localhost:1235/upload",
                    method: 'post',
                    data: form,
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                }).then((res) =&gt; {
                    console.log(res.data);
                })

            }
        }
    }
&lt;/script&gt;

</pre></td></tr></tbody></table></code></pre></div></div>
<p>template的代码是直接复制黏贴的，不解释了，说说上传的逻辑</p>
<blockquote>
  <p>使用<code class="highlighter-rouge">var form = new FormData()</code>创建表单数据，使用将<code class="highlighter-rouge">append</code>方法将<code class="highlighter-rouge">data</code>中的<code class="highlighter-rouge">file</code>传入，并取名为”file”<br />
随后使用axios进行上传，设置路径，方法，携带数据，头部信息即可，Content-Type是固定写法（至少我是这样）</p>
</blockquote>

<p>如果遇到了跨域问题，那么在java的Controller中加入@CrossOrigin注解即可访问，亲测有效</p>

<hr />

:ET